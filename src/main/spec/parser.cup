
package askov.schoolprojects.compilerconstruction.mjcompiler;

import java_cup.runtime.*;
import askov.schoolprojects.compilerconstruction.mjcompiler.ast.*;
import org.apache.log4j.*;
import askov.schoolprojects.compilerconstruction.mjcompiler.loggers.SyntaxErrorMJLogger;

parser code {:

	private boolean lexicalErrorDetected;

	private boolean syntaxErrorDetected;
	private boolean fatalSyntaxErrorDetected;

	public boolean lexicalErrorDetected() {
		return lexicalErrorDetected;
	}

    public boolean syntaxErrorDetected() {
    	return syntaxErrorDetected;
    }

    public boolean fatalSyntaxErrorDetected() {
    	return fatalSyntaxErrorDetected;
    }

	SyntaxErrorMJLogger syntaxErrorMJLogger = new SyntaxErrorMJLogger();

	@Override
	public void syntax_error(Symbol cur_token) {
	    report_error(null, cur_token);
	}

	@Override
	public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
		syntaxErrorMJLogger.log(null, cur_token.left, null, SyntaxErrorMJLogger.SyntaxErrorKind.FATAL_ERROR);
	    report_fatal_error(null, null);
	}

	@Override
	public void report_fatal_error(String message, Object info) throws java.lang.Exception {
		fatalSyntaxErrorDetected = true;
		done_parsing();
	}

	@Override
	public void report_error(String message, Object info) {
		syntaxErrorDetected = true;
	}

:}

init with {:
	lexicalErrorDetected = syntaxErrorDetected = false;
:}

scan with {:
	Scanner scanner = getScanner();
	Symbol symbol = scanner.next_token();
	if(symbol.sym == sym.ERROR) {
		lexicalErrorDetected = true;
		return scan();
	} else {
		return symbol;
	}
:}

/* *************** TERMINAL SYMBOLS *************** */
terminal PROGRAM;
terminal LBRACE;
terminal RBRACE;
terminal IDENT;
terminal EXTENDS;
terminal THIS;
terminal LPAREN;
terminal RPAREN;
terminal CLASS;
terminal COMMA;
terminal RETURN;
terminal SEMI;
terminal IDENTIFIER;
terminal ASSIGN;
terminal DOT;
terminal INT;
terminal BOOL;
terminal CHAR;


/* *************** NON-TERMINAL SYMBOLS *************** */
nonterminal Program;
nonterminal ProgramName;
nonterminal ClassList;
nonterminal Class;
nonterminal CName;
nonterminal CParent
nonterminal CBody
nonterminal CElement
nonterminal Constructor
nonterminal ParamsList
nonterminal Params
nonterminal Block
nonterminal Statement
nonterminal Variable
nonterminal Method
nonterminal Expressions
nonterminal ConstructorCall
nonterminal Primary
nonterminal Literal
nonterminal CallArgs
nonterminal Call


/* *************** PRODUCTIONS *************** */

Program               ::= (Program) PROGRAM ProgramName ClassList LBRACE ProgramEnd;

ProgramName           ::= (ProgramName) IDENT:ident;

ClassList             ::= (NonEmptyClassList) ClassList Class
                      |  (EmptyClassList) /* epsilon */;

Class                 ::= (Class) CLASS CName CParent LBRACE CBody RBRACE;

CName                 ::= (CName) IDENT:ident;

CParent               ::= (ChildClass) EXTENDS CName
                      | (BaseClass) /* epsilon */;

CBody                 ::= (CBodyNonEmpty) CBody CElement
                      | (CBodyEmpty) /* epsilon */;

CElement              ::= (CElVar) Variable
                      | (CElConstr) Constructor
                      | (CElMethod) Method;

Constructor           ::= (Constructor) THIS LPAREN ParamsList RPAREN LBRACE Block RBRACE;

ParamsList            ::= (ParamsListNonEmpty) LPAREN Params RPAREN
                      | (ParamsListEmpty) /* epsilon */;

Params                ::= (ParamsMult) Parameter COMMA Params
                      | (ParamsOne) Parameter;

Block                 ::= (BlockNonEmpty) Statement Block
                      | (BlockEmpty) /* epsilon */;

Statement             ::= (IfThenStatement) IF LPAREN Expression RPAREN LBRACE Block RBRACE
                      | (WhileStatements) WHILE LPAREN Expression RPAREN LBRACE Block RBRACE
                      | (RetrurnSemiStatements) RETURN SEMI
                      | (RetrurnStatements) RETURN Expression SEMI
                      | (VariableStatement) CName IDENTIFIER ASSIGN Expression SEMI
                      | (AssignmentStatement) IDENTIFIER ASSIGN Expression SEMI;

Variable              ::= (Variable) CName IDENTIFIER ASSIGN Expression SEMI;

Method                ::= (MethodVoid) VOID IDENTIFIER Params  LBRACE Block RBRACE
                      | (MethodName) CName IDENTIFIER Params LBRACE Block RBRACE;

Expressions           ::= (PrimaryExp) Primary
                      | (ConstructorCallExp) ConstructorCall
                      | (Expression) Expressions DOT Call;

ConstructorCall       ::= (ConstCallEmpty) CName LPAREN RPAREN
                      | (ConstCallNonEmpty) CName LPAREN CallArgs RPAREN;

Primary               ::= (PrimaryLiteral) Literal
                      | (PrimaryThis) THIS
                      | (PrimaryIdent) IDENTIFIER;

Literal               ::= (LiteralBool) BOOL:value
                      | (LiteralInt) INT:value
                      | (LiteralChar) CHAR:value;

CallArgs              ::= (CallArgsExp) Expressions
                      | (CallArgsRec) CallArgs COMMA Expressions;

Call                  ::= (CallWithoutArgs) IDENTIFIER
                      | (CallWithArgs) CallArgs COMMA Expressions